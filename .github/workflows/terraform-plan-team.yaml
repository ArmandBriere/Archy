name: Hackathon - Run terraform plan for a team

on:
  workflow_dispatch:
    inputs:
      team-name:
        type: choice
        description: Team name
        required: true
        options:
          - team_a
          - team_b
          - team_c
          - team_d
          - team_e
          - team_f

jobs:
  plan:
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/environments/${{ github.event.inputs.team-name }}
    steps:
      - uses: "actions/checkout@v3"

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3

        with:
          node-version: 18.x

      - name: ts - NPM Install
        working-directory: ./src/functions/ts
        run: npm ci
      - name: ts - Build
        working-directory: ./src/functions/ts
        run: npm run build

      - name: poll - NPM Install
        working-directory: ./src/functions/poll
        run: npm ci
      - name: poll - Test
        working-directory: ./src/functions/poll
        run: npm run test:ci
      - name: poll - Build
        working-directory: ./src/functions/poll
        run: npm run build

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/763564183085/locations/global/workloadIdentityPools/github-actions-terraform-pool/providers/github-actions-provider"
          service_account: "github-actions-terraform@archy-f06ed.iam.gserviceaccount.com"

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform lint
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
